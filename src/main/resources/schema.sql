CREATE TABLE IF NOT EXISTS mpa (
    id INTEGER PRIMARY KEY NOT NULL,
    name VARCHAR,
    description VARCHAR
);

CREATE TABLE IF NOT EXISTS genres (
    id INTEGER PRIMARY KEY NOT NULL,
    name VARCHAR
);

CREATE TABLE IF NOT EXISTS directors (
    id INTEGER PRIMARY KEY NOT NULL,
    name VARCHAR
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR,
    description VARCHAR,
    releaseDate DATE,
    duration INTEGER,
    mpa INTEGER REFERENCES mpa (id)
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR,
    login VARCHAR,
    name VARCHAR,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS reviews (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR,
    is_positive BOOLEAN,
    id_user INTEGER REFERENCES users (id),
    id_film INTEGER REFERENCES films (id),
    useful INTEGER
);

CREATE TABLE IF NOT EXISTS feed (
    id_event INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_entity INTEGER,
    id_user INTEGER REFERENCES users (id),
    timestamp DATETIME,
    event_type VARCHAR,
    operation VARCHAR
);

CREATE TABLE IF NOT EXISTS film_directors (
    id_film INTEGER REFERENCES films (id),
    id_director INTEGER REFERENCES directors (id),
    PRIMARY KEY (id_film, id_director)
    );

CREATE TABLE IF NOT EXISTS film_genres (
    id_film INTEGER REFERENCES films (id),
    id_genre INTEGER REFERENCES genres (id),
    PRIMARY KEY (id_film, id_genre)
);

CREATE TABLE IF NOT EXISTS likes_by_users (
    id_film INTEGER NOT NULL REFERENCES films (id),
    id_user INTEGER NOT NULL REFERENCES users (id),
    PRIMARY KEY (id_film, id_user)
);

CREATE TABLE IF NOT EXISTS friends (
    id_user INTEGER NOT NULL REFERENCES users (id),
    id_friend INTEGER NOT NULL REFERENCES users (id),
    PRIMARY KEY (id_user, id_friend)
);

